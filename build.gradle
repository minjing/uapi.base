ext.project_version = getProjectVersion()
ext.publish_repo    = getMavenRepo()

subprojects {
    afterEvaluate {
        apply plugin: 'java'

        repositories {
            jcenter()
        }

        sourceCompatibility = 11
        targetCompatibility = 11

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        publishing {
            publications {
                localPublication(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    groupId "${project_group}"
                    artifactId "${project.name}"
                    version "${project_version}"
                }
            }
        }
    }
}

def getProjectVersion() {
    def release = project.hasProperty("project_release") ? project.project_release.toBoolean() : null
    def rcno = project.hasProperty("project_rcno") ? project.project_rcno.toInteger() : null
    def prjVer = "${project_version_major}.${project_version_minor}.${project_version_fix}"
    if (release) {
        return "${prjVer}-release"
    } else if (rcno > 0) {
        return "${prjVer}-rc${rcno}"
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        def ts = timestampFormat.format(new Date())
        return "${prjVer}-${ts}"
    }
}

def getMavenRepo() {
    if (project.project_release.toBoolean()) {
        return 'maven-release'
    } else {
        return 'maven-snapshot'
    }
}
